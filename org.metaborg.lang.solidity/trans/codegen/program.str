module codegen/program

imports
  nabl2/api
  
  signatures/ebc/-
  ebc/ebcshared/ebcfunctions
  ebc/ebcshared/codegen

  signatures/-
  desugar/-
  analysis/types
  
  codegen/contracts
  codegen/imports
  codegen/pragmas
  codegen/util
  
  libspoofax/stratego/debug

rules
  //TODO ABI Generation
  
  //-----------------------------------------------------------------------------------------------
  //Program
  //-----------------------------------------------------------------------------------------------
  //A program consists of a specific "contract load" sequence which loads the actual code of the
  //contract and then jumps into it. 
  program-to-ebc: Program(content) -> [EBCFile(None(), "WIP", Code(<fix-instructions> <concat> [
    [
      //Default initialization (allocate 128 bytes of memory)
      PUSH(1, "0x80"),       //0,1
      PUSH(1, "0x40"),       //2,3
      MSTORE(),              //4
      CALLVALUE(),           //5
      
      //If return of CALLVALUE is zero (success), then jump to tagLoad
      DUP(1),                //6
      ISZERO(),              //7
      PUSHTAG(tagLoad),      //8,910
      JUMPI(),               //11
      
      //Else, REVERT
      PUSH(1, 0),            //12,13
      DUP(1),                //14
      REVERT(),              //15
      
      //TagLoad: Load code
      JUMPDESTTAG(tagLoad),  //16
      POP(),                 //17
      <create-push> plen,    //18,19,20 [Length of contract code]
      DUP(1),                //21       [???]
      PUSHTAG(tagCodeStart), //22,23,24 [Begin of contract code]
      PUSH(1, 0),            //25,26    [Start at index 0]
      CODECOPY(),            //27       [Load the code starting at PC x of length l]
      PUSH(1, 0),            //28,29    [Push 0 to signal success]
      RETURN(),              //30       [Return to caller]
      STOP(),                //31
      TAG(tagCodeStart),     //32       [Begin of contract code]
      RESETPC()
    ],
    code,
    [ STOP() ]
  ]))] where
    <newname> "CodeStart" => tagCodeStart;
    <newname> "LoadCode"  => tagLoad;
    code := <mapconcat(program-content-to-ebc)> content;
    plen := <instructions-length> code
  
  program-content-to-ebc = pragma-to-ebc
  program-content-to-ebc = import-to-ebc
  program-content-to-ebc = interface-to-ebc
  program-content-to-ebc = library-to-ebc
  program-content-to-ebc = contract-to-ebc
  
  