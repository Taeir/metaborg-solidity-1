module ebc/EBC

imports ebc/Layout

context-free start-symbols
  EBCStart
  Code
  Instr

lexical syntax
  EBCHex      = "0x" EBCHexChars
  EBCHexChars = [0-9A-Fa-f]+
  EBC0To4     = [0-4]
  EBC1To16    = [1-9] | ("1" [0-6])
  EBC1To32    = [1-9] | ([12] [0-9]) | ("3" [0-2])
  
  EBCINT      = [0-9]+
  
  EBCTag      = [a-zA-Z0-9\_]+
  
syntax
  //I use kernel syntax for PUSH, DUP, SWAP and LOG to be able to exclue "PUSH" from the AST but prevent LAYOUT.
  EBCPush-CF  = "PUSH" EBC1To32-CF
  EBCDup-CF   = "DUP" EBC1To16-CF
  EBCSwap-CF  = "SWAP" EBC1To16-CF
  EBCLog-CF   = "LOG" EBC0To4-CF

lexical restrictions
//  EBCHexChars -/- [0-9a-fA-F]
  EBC0To4     -/- [0-9]
  EBC1To16    -/- [0-9]
  EBC1To32    -/- [0-9]
  EBCINT      -/- [0-9]
  EBCTag      -/- [a-zA-Z0-9\_]
  
context-free syntax

  EBCStart.Empty = <>
  EBCStart       = EBCFile
  
  EBCFile.EBCFile = <
    FILE: <EBCAnything>
    CONTRACT: <EBCAnything>
    CODE:
      <Code>
  >
  
  Code.Code      = <<{Instr "\n"}*>>

  //0x1*: Stop and arithmetic
  Instr.STOP           = <STOP>				//0x00: Halts execution
  Instr.ADD            = <ADD>				//0x01: Addition operation
  Instr.MUL            = <MUL>				//0x02: Multiplication operation
  Instr.SUB            = <SUB>				//0x03: Subtraction operation
  Instr.DIV            = <DIV>				//0x04: Integer division operation
  Instr.SDIV           = <SDIV>				//0x05: Signed integer
  Instr.MOD            = <MOD>				//0x06: Modulo
  Instr.SMOD           = <SMOD>				//0x07: Signed modulo
  Instr.ADDMOD         = <ADDMOD>			//0x08: Modulo
  Instr.MULMOD         = <MULMOD>			//0x09: Modulo
  Instr.EXP            = <EXP>				//0x0A: Exponential operation
  Instr.SIGNEXTEND     = <SIGNEXTEND>		//0x0B: Extend length of two's complement signed integer
  
  //0x1*: Comparison and bitwise logic operations
  Instr.LT             = <LT>				//0x10: Lesser-than comparison
  Instr.GT             = <GT>				//0x11: Greater-than comparison
  Instr.SLT            = <SLT>				//0x12: Signed less-than comparison
  Instr.SGT            = <SGT>				//0x13: Signed greater-than comparison
  Instr.EQ             = <EQ>				//0x14: Equality  comparison
  Instr.ISZERO         = <ISZERO>			//0x15: Simple not operator
  Instr.AND            = <AND>				//0x16: Bitwise AND operation
  Instr.OR             = <OR>				//0x17: Bitwise OR operation
  Instr.XOR            = <XOR>				//0x18: Bitwise XOR operation
  Instr.NOT            = <NOT>				//0x19: Bitwise NOT operation
  Instr.BYTE           = <BYTE>				//0x1A: Retrieve single byte from word
  Instr.SHL            = <SHL>				//0x1B: [145] Shift left (top: shiftwith, top-1: value) https://github.com/axic/EIPs/blob/master/EIPS/eip-145.md
  Instr.SHR            = <SHR>				//0x1C: [145] Logical shift right (zero fill) (top: shiftwith, top-1: value)
  Instr.SAR            = <SAR>				//0x1D: [145] Arithmetic Shift right (sign extension) (top: shiftwith, top-1: value)

  //0x2*: Hashing
  Instr.SHA3           = <SHA3>				//0x20: Compute Keccak-256 hash

  //0x3*: Environmental Information
  Instr.ADDRESS        = <ADDRESS>			//0x30: Get address of currently executing account
  Instr.BALANCE        = <BALANCE>			//0x31: Get balance of the given account
  Instr.ORIGIN         = <ORIGIN>			//0x32: Get execution origination address
  Instr.CALLER         = <CALLER>			//0x33: Get caller address. This is the address of the account that is directly responsible for this execution
  Instr.CALLVALUE      = <CALLVALUE>		//0x34: Get deposited value by the instruction/transaction responsible for this execution
  Instr.CALLDATALOAD   = <CALLDATALOAD>		//0x35: Get input data of current environment
  Instr.CALLDATASIZE   = <CALLDATASIZE>		//0x36: Get size of input data in current environment
  Instr.CALLDATACOPY   = <CALLDATACOPY>		//0x37: Copy input data in current environment to memory This pertains to the input data passed with the message call instruction or transaction
  Instr.CODESIZE       = <CODESIZE>			//0x38: Get size of code running in current environment
  Instr.CODECOPY       = <CODECOPY>			//0x39: Copy code running in current environment to memory
  Instr.GASPRICE       = <GASPRICE>			//0x3A: Get price of gas in current environment
  Instr.EXTCODESIZE    = <EXTCODESIZE>		//0x3B: Get size of an account's code
  Instr.EXTCODECOPY    = <EXTCODECOPY>		//0x3C: Copy an account's code to memory
  
  Instr.RETURNDATASIZE = <RETURNDATASIZE>	//0x3D: [211] https://github.com/axic/EIPs/blob/master/EIPS/eip-211.md
  Instr.RETURNDATACOPY = <RETURNDATACOPY>	//0x3E: [211] https://github.com/axic/EIPs/blob/master/EIPS/eip-211.md

  //0x4*: Block Information
  Instr.BLOCKHASH      = <BLOCKHASH>		//0x40: Get the hash of one of the 256 most recent complete blocks
  Instr.COINBASE       = <COINBASE>			//0x41: Get the block's beneficiary address
  Instr.TIMESTAMP      = <TIMESTAMP>		//0x42: Get the block's timestamp
  Instr.NUMBER         = <NUMBER>			//0x43: Get the block's number
  Instr.DIFFICULTY     = <DIFFICULTY>		//0x44: Get the block's difficulty
  Instr.GASLIMIT       = <GASLIMIT>			//0x45: Get the block's gas limit

  //0x5*: Stack, Memory, Storage and Flow Operations
  Instr.POP            = <POP>				//0x50: Remove item from stack
  Instr.MLOAD          = <MLOAD>			//0x51: Load word from memory
  Instr.MSTORE         = <MSTORE>			//0x52: Save word to memory
  Instr.MSTORE8        = <MSTORE8>			//0x53: Save byte to memory
  Instr.SLOAD          = <SLOAD>			//0x54: Load word from storage
  Instr.SSTORE         = <SSTORE>			//0x55: Save word to storage
  Instr.JUMP           = <JUMP>				//0x56: Alter the program counter
  Instr.JUMPI          = <JUMPI>			//0x57: Conditionally alter the program counter
  Instr.PC             = <PC>				//0x58: Get the value of the program counter prior to the increment
  Instr.MSIZE          = <MSIZE>			//0x59: Get the size of active memory in bytes
  Instr.GAS            = <GAS>				//0x5A: Get the amount of available gas, including the corresponding reduction
  Instr.JUMPDEST       = <JUMPDEST>			//0x5B: Mark a valid destination for jumps
  
  //0x60-0x7F: Push Operations
  Instr.PUSH           = <<EBCPush>       	<EBCHex>> //60-7F: Place n-byte item on stack
  
  //0x8*: Dup
  Instr.DUP            = <<EBCDup>>			//80-8F: Duplicate n-th stack item
  
  //0x9*: Swap
  Instr.SWAP           = <<EBCSwap>>		//90-9F: Exchange 0th and n-th stack items

  //0xA*: Log
  Instr.LOG            = <<EBCLog>>			//A0-A4: Append log record with n topics

  //0xF*: System operations
  Instr.CREATE         = <CREATE>			//0xF0: Create a new account with associated code
  Instr.CALL           = <CALL>				//0xF1: Message-call into an account
  Instr.CALLCODE       = <CALLCODE>			//0xF2: Message-call into this account with alternative account's code
  Instr.RETURN         = <RETURN>			//0xF3: Halt execution returning output data
  Instr.DELEGATECALL   = <DELEGATECALL>		//0xF4: Message-call into this account with an alternative account's code, but persisting the current values for `sender` and `value` (gas, to, in_offset, in_size, out_offset, out_size) https://github.com/axic/EIPs/blob/master/EIPS/eip-7.md

  Instr.STATICCALL     = <STATICCALL>		//0xFA: [214] Call another contract, while disallowing any modifications to the state during the call. (6 args) https://github.com/axic/EIPs/blob/master/EIPS/eip-214.md
  Instr.REVERT         = <REVERT>			//0xFD: [140] Reverts all changes and stops execution (stack: memory_offset, memory_length)
  Instr.INVALID        = <INVALID>			//0xFE: [141] Aborts execution.
  Instr.SELFDESTRUCT   = <SELFDESTRUCT>		//0xFF: Halt execution and register account for later deletion

  //Custom: tags
  Instr.TAG            = <:<EBCTag>>		//A labelled (tagged) location
  Instr.RESETPC        = <resetpc>			//Resets the program counter for jumps to 0
  Instr.PUSHTAG        = <PUSHTAG     	<EBCID>>	//Push the address of the tag with the given number
